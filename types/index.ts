/**
 * Enum for transaction status values
 */
export enum TransactionStatus {
  Pending = "pending",
  Completed = "completed",
  Failed = "failed",
  Cancelled = "cancelled",
}

/**
 * Enum for subscription status values
 */
export enum SubscriptionStatus {
  Active = "active",
  PastDue = "past_due",
  Canceled = "canceled",
  Unpaid = "unpaid",
  Failed = "failed",
  Expired = "expired",
  Incomplete = "incomplete",
  Trialing = "trialing"
}

/**
 * Enum for order status values
 */
export enum OrderStatus {
  Pending = "pending",
  Completed = "completed",
  Canceled = "canceled",
  Failed = "failed"
}

/**
 * Enum for payment type values
 */
export enum PaymentType {
  Subscription = "subscription",
  OneTime = "one_time"
}

/**
 * Enum for currency code values
 */
export enum CurrencyCode {
  USD = "USD",
  EUR = "EUR",
  BTC = "BTC",
}

export type PlanType = "hashrate" | "hosting";

/**
 * Interface for facility/miner details stored as JSONB
 */
export interface Details {
  location?: string;
  specs?: {
    power?: number;
    capacity?: number;
    [key: string]: string | number | boolean | undefined;
  };
  [key: string]: string | number | boolean | Details | undefined;
}

/**
 * Interface for payment provider configuration stored as JSONB
 */
export interface PaymentConfig {
  apiKey?: string;
  endpoint?: string;
  [key: string]: string | number | boolean | undefined;
}

/**
 * Stores user profiles linked to Clerk authentication
 */
export interface User {
  id: string;
  user_id: string; // Maps to Clerk's `sub` claim
  first_name?: string | null;
  last_name?: string | null;
  full_name?: string | null;
  email?: string | null;
  org_id?: string | null; // Links to Clerk organization
  payment_provider_customer_id?: string | null; // Generic field for Stripe/NowPayments customer ID
  crypto_address?: string | null; // Must match regex ^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores mining facility locations
 */
export interface Facility {
  id: string;
  name: string;
  details?: Details | null; // JSONB
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores mining hardware details
 */
export interface Miner {
  id: string;
  name: string;
  details?: Details | null; // JSONB
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores payment provider configurations
 */
export interface PaymentMethod {
  id: string;
  name: string; // Unique
  display_name: string;
  is_active: boolean;
  requires_crypto_address: boolean;
  config?: PaymentConfig | null; // JSONB
  created_at: string; // ISO 8601 timestamp
  updated_at: string; // ISO 8601 timestamp
}

/**
 * Defines hashrate-based mining plans with pricing
 */
export interface HashratePlan {
  id: string;
  hashrate: number; // Must be > 0
  price: number; // Must be > 0
  currency: CurrencyCode;
  duration: string;
  stripe_price_id?: string | null;
  nowpayments_item_id?: string | null;
  is_subscription: boolean;
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores hosting service plans for miners
 */
export interface HostingPlan {
  id: string;
  miner_id?: string | null; // References Miner
  facility_id?: string | null; // References Facility
  price: number; // Must be > 0
  currency: CurrencyCode;
  duration: string;
  stripe_price_id?: string | null;
  nowpayments_item_id?: string | null;
  is_subscription: boolean;
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores payment transactions for plans
 */
export interface Transaction {
  id: string; // UUID (auto-generated by uuid_generate_v4)
  user_id: string | null; // UUID, references users(id), nullable
  plan_type: PlanType; // Constrained to 'hashrate' or 'hosting'
  plan_id: string; // UUID, references hashrate_plans(id) or hosting_plans(id)
  payment_type: PaymentType; // Enum: 'one_time' or 'subscription'
  amount: number; // Numeric(10,2), must be > 0
  currency: CurrencyCode; // Constrained to 'USD', 'EUR', 'BTC', defaults to 'USD'
  status: TransactionStatus; // Enum, defaults to 'pending'
  payment_method_id?: string | null; // UUID, references payment_methods(id), nullable
  payment_provider_reference?: string | null; // Text, nullable
  subscription_id?: string | null; // UUID, references subscriptions(id), nullable
  checkout_session_id?: string | null; // Text, nullable
  metadata?: Record<string, unknown> | null; // JSONB, nullable
  created_at: string; // ISO 8601 timestamp (defaults to CURRENT_TIMESTAMP)
}

/**
 * Stores recurring subscription details
 */
export interface Subscription {
  id: string;
  user_id: string; // References User
  plan_type: 'hashrate' | 'hosting';
  plan_id: string; // References HashratePlan or HostingPlan
  status: SubscriptionStatus;
  payment_method_id?: string | null; // References PaymentMethod
  provider_subscription_id: string;
  current_period_start?: string | null; // ISO 8601 timestamp
  current_period_end?: string | null; // ISO 8601 timestamp
  cancel_at_period_end: boolean;
  canceled_at?: string | null; // ISO 8601 timestamp
  checkout_session_id?: string | null;
  metadata?: Record<string, unknown> | null; // JSONB
  created_at: string; // ISO 8601 timestamp
  updated_at: string; // ISO 8601 timestamp
}

/**
 * Stores user orders for plans or services
 */
export interface Order {
  id: string;
  user_id: string; // References User
  plan_type: 'hashrate' | 'hosting' | 'bundle';
  plan_ids: string[]; // References HashratePlan or HostingPlan
  transaction_ids: string[]; // References Transaction
  subscription_id?: string | null; // References Subscription
  crypto_address?: string | null; // Must match regex ^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$
  status: OrderStatus;
  start_date?: string | null; // ISO 8601 timestamp
  end_date?: string | null; // ISO 8601 timestamp
  is_active: boolean;
  next_billing_date?: string | null; // ISO 8601 timestamp
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores secure session links for subscription management
 */
export interface SubscriptionSession {
  id: string;
  user_id: string; // References User
  subscription_id: string; // References Subscription
  provider: 'stripe' | 'nowpayments';
  session_id: string;
  session_url: string;
  expires_at: string; // ISO 8601 timestamp
  is_used: boolean;
  metadata?: Record<string, unknown> | null; // JSONB
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores subscription event logs
 */
export interface SubscriptionEvent {
  id: string;
  subscription_id: string; // References Subscription
  user_id: string; // References User
  event_type: string;
  provider: 'stripe' | 'nowpayments';
  data: Record<string, unknown>; // JSONB
  status: 'success' | 'failed';
  error_message?: string | null;
  created_at: string; // ISO 8601 timestamp
  updated_at: string; // ISO 8601 timestamp
}

/**
 * Stores user feedback and satisfaction ratings
 */
export interface SurveyResponse {
  id: string;
  user_id?: string | null; // References User
  anonymous_user_id: string;
  satisfaction: number; // 1-5
  completed: boolean;
  issue?: string | null;
  suggestion?: string | null;
  nps?: number | null; // 0-10
  metadata?: Record<string, unknown> | null; // JSONB
  created_at: string; // ISO 8601 timestamp
}

/**
 * Stores user notifications
 */
export interface Notification {
  id: string;
  user_id: string; // References User
  subscription_id?: string | null; // References Subscription
  transaction_id?: string | null; // References Transaction
  type: string;
  message: string;
  status: 'pending' | 'sent' | 'failed';
  scheduled_at?: string | null; // ISO 8601 timestamp
  sent_at?: string | null; // ISO 8601 timestamp
  created_at: string; // ISO 8601 timestamp
}